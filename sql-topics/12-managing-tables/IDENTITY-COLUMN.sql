/*
    Author: David Castrill√≥n
    Date: 2023
*/

/*
    -- IDENTITY COLUMN

    - PostgreSQL version 10 introduced a new constraint GENERATED AS IDENTITY that allows you to automatically
        assign a unique number to a column.
    - The GENERATED AS IDENTITY constraint is the SQL standard-conforming variant of the good old SERIAL column.
*/

/*
    column_name type GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY[ ( sequence_option ) ]

    - The type can be SMALLINT, INT, or BIGINT.
    - The GENERATED ALWAYS instructs PostgreSQL to always generate a value for the identity column. If you attempt
        to insert (or update) values into the GENERATED ALWAYS AS IDENTITY column, PostgreSQL will issue an error.
    - The GENERATED BY DEFAULT also instructs PostgreSQL to generate a value for the identity column. However, if you
        supply a value for insert or update, PostgreSQL will use that value to insert into the identity column instead
        of using the system-generated value.

    PostgreSQL allows you a table to have more than one identity column. Like the SERIAL, the GENERATED AS IDENTITY
    constraint also uses the SEQUENCE object internally.
*/

-- GENERATED ALWAYS example --------------------------------------------------------------------------------------------
CREATE TABLE color (
    color_id INT GENERATED ALWAYS AS IDENTITY,
    color_name VARCHAR NOT NULL
);

INSERT INTO color (color_name)
VALUES ('Red');

SELECT * FROM color;

-- this will throw an error
INSERT INTO color (color_id, color_name)
VALUES (2, 'Green');

DROP TABLE color;

-- GENERATED BY DEFAULT AS IDENTITY example ----------------------------------------------------------------------------
CREATE TABLE color (
    color_id INT GENERATED BY DEFAULT AS IDENTITY,
    color_name VARCHAR NOT NULL
);

INSERT INTO color (color_name)
VALUES ('White');

INSERT INTO color (color_id, color_name)
VALUES (2, 'Yellow');

SELECT * FROM color;

DROP TABLE color;

-- Sequence options example --------------------------------------------------------------------------------------------
-- Because the GENERATED AS IDENTITY constraint uses the SEQUENCE object, you can specify the sequence options for
-- the system-generated values.

CREATE TABLE color (
    color_id INT GENERATED BY DEFAULT AS IDENTITY (START WITH 10 INCREMENT BY 10),
    color_name VARCHAR NOT NULL
);

INSERT INTO color (color_name)
VALUES ('Orange');

INSERT INTO color (color_name)
VALUES ('Purple');

SELECT * FROM color;

DROP TABLE color;

/*
    Adding an identity column to an existing table ---------------------------------------------------------------------

    ALTER TABLE table_name
    ALTER COLUMN column_name
    ADD GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY { ( sequence_option ) }
*/

CREATE TABLE shape (
    shape_id INT NOT NULL,
    shape_name VARCHAR NOT NULL
);

-- Note that the shape_id needs to have the NOT NULL constraint so that it can be changed to an identity column.
ALTER TABLE shape
ALTER COLUMN shape_id
ADD GENERATED ALWAYS AS IDENTITY;

/*
    Changing an identity column ----------------------------------------------------------------------------------------

    ALTER TABLE table_name
    ALTER COLUMN column_name
    { SET GENERATED { ALWAYS| BY DEFAULT } |
    SET sequence_option | RESTART [ [ WITH ] restart ] }
*/
ALTER TABLE shape
ALTER COLUMN shape_id
SET GENERATED BY DEFAULT;

/*
    Removing the GENERATED AS IDENTITY constraint ----------------------------------------------------------------------

    ALTER TABLE table_name
    ALTER COLUMN column_name
    DROP IDENTITY [ IF EXISTS ]
*/
ALTER TABLE shape
ALTER COLUMN shape_id
DROP IDENTITY IF EXISTS;

DROP TABLE shape;